services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server broker:29092 --list" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:14-alpine
    container_name: postgres_db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: traffic_db
    volumes:
      - postgres_data:/var/lib/postgresql/data

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server --console-address ":9001" /data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 5

  ingestion-service:
    build: ./ingestion-service
    ports:
      - "8080:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: broker:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/traffic_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: admin
    depends_on:
      - broker
      - postgres

  # BẬT LẠI IMAGE STORAGE SERVICE
  # image-storage-service:
  #   build: ./image-storage-service
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     KAFKA_BOOTSTRAP_SERVERS: broker:29092
  #     MINIO_ENDPOINT: http://minio:9000
  #     MINIO_ACCESS_KEY: minioadmin
  #     MINIO_SECRET_KEY: minioadmin
  #     MINIO_BUCKET_NAME: traffic-images
  #   depends_on:
  #     minio:
  #       condition: service_healthy
  #     broker:
  #       condition: service_healthy

  traffic-analysis-service:
    build: ./traffic-analysis-service
    ports:
      - "8082:8082"
    environment:
      KAFKA_BROKER: broker:29092
      IMAGE_BASE_URL: https://api.notis.vn/v4/
      # Thêm cấu hình MinIO
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET_NAME: traffic-analyzed-images
    depends_on:
      broker:
        condition: service_healthy
      minio:
        condition: service_healthy
    cpus: '2'
    mem_limit: 2G

  dashboard-service:
    build: ./dashboard-service
    ports:
      - "8085:8085"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: broker:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/traffic_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: admin
      APP_SIMULATE: "true"
    depends_on:
      - broker
      - postgres

volumes:
  postgres_data:
  minio_data:
